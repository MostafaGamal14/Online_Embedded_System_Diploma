
Unit6_lesson4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000655  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  00000861  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a8  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000316  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000156a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_1>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 


 int main(void)
 {
 DDRA |=(1<<PA0);
  6c:	d0 9a       	sbi	0x1a, 0	; 26
 DDRB |=(1<<PB0)|(1<<PB1);
  6e:	87 b3       	in	r24, 0x17	; 23
  70:	83 60       	ori	r24, 0x03	; 3
  72:	87 bb       	out	0x17, r24	; 23
 DDRD &=~(1<<PD2)|(1<<PD3);          /* Make Pin INT0 as Input */
  74:	8a 98       	cbi	0x11, 2	; 17
 PORTD|=(1<<PD2)|(1<<PD3);           /* Activate Internal Resistor */
  76:	82 b3       	in	r24, 0x12	; 18
  78:	8c 60       	ori	r24, 0x0C	; 12
  7a:	82 bb       	out	0x12, r24	; 18
 
 MCUCR |=(1<<0)  ;    /* Activate interrupt at fall edge & Rising edge for int0*/
  7c:	85 b7       	in	r24, 0x35	; 53
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	85 bf       	out	0x35, r24	; 53
 MCUCR &=~(1<<1);
  82:	85 b7       	in	r24, 0x35	; 53
  84:	8d 7f       	andi	r24, 0xFD	; 253
  86:	85 bf       	out	0x35, r24	; 53
 
 MCUCR |=(1<<3)  ;   /* Activate interrupt at fall edge for int1 */
  88:	85 b7       	in	r24, 0x35	; 53
  8a:	88 60       	ori	r24, 0x08	; 8
  8c:	85 bf       	out	0x35, r24	; 53
 MCUCR |=(1<<2)  ;    
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	84 60       	ori	r24, 0x04	; 4
  92:	85 bf       	out	0x35, r24	; 53
 
 
 GICR |=(1<<6);          /* Activate Pin INT0 */
  94:	8b b7       	in	r24, 0x3b	; 59
  96:	80 64       	ori	r24, 0x40	; 64
  98:	8b bf       	out	0x3b, r24	; 59
 GICR |=(1<<7);          /* Activate Pin INT1 */
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8b bf       	out	0x3b, r24	; 59

sei();
  a0:	78 94       	sei
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x36>

000000a4 <__vector_1>:
 
 while (1) ;
 }
 
 ISR(INT0_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
 PORTB^=(1<<PB0);
  b4:	98 b3       	in	r25, 0x18	; 24
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	89 27       	eor	r24, r25
  ba:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f e3       	ldi	r18, 0x3F	; 63
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	93 e0       	ldi	r25, 0x03	; 3
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__vector_1+0x1e>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <__vector_1+0x28>
  cc:	00 00       	nop
 _delay_ms(1000);
 }
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_2>:
 ISR(INT1_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
 PORTB^=(1<<PB1);
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	89 27       	eor	r24, r25
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	2f e3       	ldi	r18, 0x3F	; 63
  f8:	8d e0       	ldi	r24, 0x0D	; 13
  fa:	93 e0       	ldi	r25, 0x03	; 3
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <__vector_2+0x1e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__vector_2+0x28>
 106:	00 00       	nop
  _delay_ms(1000);

 }
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
